from datetime import timedelta
from typing import Optional

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from log import LogModel, encode_log_config
from models import get_datetime_now
from data.texts import config_share

menu_markup = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üë®‚Äçüíª –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏")],
    [
        KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        KeyboardButton(text="üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    ],
    [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
], resize_keyboard=True)

settings_markup = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text="‚õîÔ∏è –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"),
        # KeyboardButton(text="‚õîÔ∏è –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"),
    ],
    [KeyboardButton(text="üîó –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –ª–æ–≥–∞")],
    [KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
], resize_keyboard=True)

tools_markup = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text="–ó–∞–¥–∞—Ç—å –∫—É–∫–∏"),
    ],
    [KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
], resize_keyboard=True)

parsers_markup = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(
            text='üá®üáø SAKARYATEKNOLOJI.COM',
            callback_data="sakaryateknoloji:start"
        ),
    ],
])

delete_markup = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete")]
])

confirm_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data='yes'),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data='no')
        ]
    ]
)

cancel_btn = KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
cancel_markup = ReplyKeyboardMarkup(keyboard=[
    [cancel_btn]
], resize_keyboard=True)
no_cancel_markup = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="no")],
    [cancel_btn]
], resize_keyboard=True)
cancel_parse_markup = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")]
], resize_keyboard=True)


def get_price_markup() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[
        [
            KeyboardButton(
                text="1-950",
            ),
        ],
        [
            KeyboardButton(
                text="100-2000",
            ),
        ],
        [
            KeyboardButton(
                text="1-9999999",
            ),
        ], [cancel_btn]
    ], resize_keyboard=True)


def get_currency_markup(currencies):
    keyboard = [[KeyboardButton(text=currency) for currency in currencies]]
    markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    return markup


# 2022/02/26  2022/02/25
# 2022/02/22  2022/02/20
# 2022/02/15.  2022/02/01

def get_post_date_markup() -> ReplyKeyboardMarkup:
    today = get_datetime_now()
    yesterday = today - timedelta(days=1)
    fday = today - timedelta(days=4)
    wday = today - timedelta(days=7)
    twday = today - timedelta(days=12)
    tfday = today - timedelta(days=25)
    return ReplyKeyboardMarkup(keyboard=[
        [
            KeyboardButton(
                text=today.strftime("%Y-%m-%d"),
            ),
            KeyboardButton(
                text=yesterday.strftime("%Y-%m-%d"),
            )
        ],
        [
            KeyboardButton(
                text=fday.strftime("%Y-%m-%d"),
            ),
            KeyboardButton(
                text=wday.strftime("%Y-%m-%d"),
            )
        ],
        [
            KeyboardButton(
                text=twday.strftime("%Y-%m-%d"),
            ),
            KeyboardButton(
                text=tfday.strftime("%Y-%m-%d"),
            )
        ],
        [
            KeyboardButton(
                text="no",
            )
        ],
        [cancel_btn]
    ], resize_keyboard=True)


def get_seller_date_markup() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[
        [
            KeyboardButton(
                text="2021-01-01",
            ),
            KeyboardButton(
                text="2019-01-01",
            )
        ],
        [
            KeyboardButton(
                text="2016-01-01",
            ),
            KeyboardButton(
                text="2018-06-15",
            )
        ],
        [
            KeyboardButton(
                text="no",
            )
        ],
        [cancel_btn]
    ], resize_keyboard=True)


def get_light(value: bool):
    return "üü¢" if value else "üî¥"


def get_log_markup(log: LogModel, bot_username: str) -> InlineKeyboardMarkup:
    config_string = encode_log_config(log)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{get_light(log.photo)} –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞",
                callback_data="cfgtoggle:photo"
            ),
            InlineKeyboardButton(
                text=f"{get_light(log.title)} –ò–º—è —Ç–æ–≤–∞—Ä–∞",
                callback_data="cfgtoggle:title"
            ),
        ],
        [
            InlineKeyboardButton(
                text=f"{get_light(log.price)} –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞",
                callback_data="cfgtoggle:price"
            ),
        ],
        [
            InlineKeyboardButton(
                text=f"{get_light(log.location)} –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                callback_data="cfgtoggle:location"
            ),
        ],
        [
            InlineKeyboardButton(
                text=f"{get_light(log.description)} –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                callback_data="cfgtoggle:description"
            ),
            InlineKeyboardButton(
                text=f"{get_light(log.views)} –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–æ–≤–∞—Ä–∞",
                callback_data="cfgtoggle:views"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{get_light(log.created)} –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞",
                callback_data="cfgtoggle:created"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{get_light(log.seller_name)} –ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞",
                callback_data="cfgtoggle:seller_name"
            ),
            # InlineKeyboardButton(
            #     text=f"{get_light(log.seller_rate)} –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞",
            #     callback_data="cfgtoggle:seller_rate"
            # ),
        ],
        [
            InlineKeyboardButton(
                text=f"{get_light(log.posts_count)} –ö–æ–ª-–≤–æ –æ–±—å—è–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞",
                callback_data="cfgtoggle:posts_count"
            ),
        ],
        [
            InlineKeyboardButton(
                text=f"{get_light(log.seller_reg)} –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞",
                callback_data="cfgtoggle:seller_reg"
            ),
        ],
        [
            # InlineKeyboardButton(
            #     text=f"{get_light(log.only_with_phone)} –¢–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º",
            #     callback_data="cfgtoggle:only_with_phone"
            # )
        ],
        [
            InlineKeyboardButton(
                text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º",
                switch_inline_query=config_share.format(
                    bot_username=bot_username,
                    config_string=config_string
                )
            )
        ],
    ])


def start_parse_markup(parser: str, payload: str = "") -> InlineKeyboardMarkup:
    if payload:
        payload = ":" + payload
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥",
            callback_data=parser + payload
        )],
        [InlineKeyboardButton(
            text="–ü—Ä–µ—Å–µ—Ç—ã",
            callback_data=parser + "_preset" + payload
        )],
        [InlineKeyboardButton(
            text="–°–≤–æ–π —Ç–µ–∫—Å—Ç WhatsApp",
            callback_data=parser + "_texts" + payload
        )],
        [InlineKeyboardButton(
            text="<<",
            callback_data="parse"
        )],
    ])


def texts_markup(parser: str, text_models, payload: str = "") -> InlineKeyboardMarkup:
    if payload:
        payload = ":" + payload
    btns = []
    for txt_model in text_models:
        btns.append([
            InlineKeyboardButton(
                text=txt_model.name,
                callback_data=parser + f"_text:{txt_model.id}" + payload
            )
        ])

    return InlineKeyboardMarkup(inline_keyboard=[
        *btns,
        [InlineKeyboardButton(
            text="–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç üìù",
            callback_data=parser + "_create_text"
        )],
        [InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ–∫—Å—Ç–∞ üóë",
            callback_data=parser + "_texts_delete" + payload
        )],
        [InlineKeyboardButton(
            text="<<",
            callback_data=parser + ":start" + payload
        )]
    ])


def back_texts_markup(parser: str, payload: str = "") -> InlineKeyboardMarkup:
    if payload:
        payload = ":" + payload
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="<<",
            callback_data=parser + "_texts" + payload
        )]
    ])


mail_sure_markup = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–£–≤–µ—Ä–µ–Ω ‚úÖ", callback_data="mailsure")],
    [InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data="delete")],
])


def get_sellers_black_markup(turned: bool) -> InlineKeyboardMarkup:
    status = "üü¢ [–í–∫–ª.]" if turned else "üî¥ [–û—Ç–∫–ª.]"
    return InlineKeyboardMarkup(inline_keyboard=[
        # [InlineKeyboardButton(
        #     text=status + " –û–±—â–∏–π —Å–ø–∏—Å–æ–∫",
        #     callback_data="toggle_sellers_black"
        # )],
        [InlineKeyboardButton(
            text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤",
            callback_data="delete_sellers_black"
        )],
    ])


def get_words_black_markup(turned: bool) -> InlineKeyboardMarkup:
    status = "üü¢" if turned else "üî¥"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=status + " –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤",
            callback_data="toggle_words_black"
        )],
        [InlineKeyboardButton(
            text="‚è¨ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ",
            callback_data="add_black_word"
        )],
        [InlineKeyboardButton(
            text="üóë –û—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤",
            callback_data="delete_words_black"
        )],
        # share
    ])


save_preset_markup = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="yes")],
    [KeyboardButton(text="no")],
    [cancel_btn]
], resize_keyboard=True)

parse_business_account = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="yes")],
    [KeyboardButton(text="no")],
    [cancel_btn]
], resize_keyboard=True)

parse_rating = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text="1"),
        KeyboardButton(text="2"),
        KeyboardButton(text="3"),

    ],
    [
        KeyboardButton(text="4"),
        KeyboardButton(text="5"),
    ],
    [
        KeyboardButton(text="no")
    ],
    [cancel_btn]
], resize_keyboard=True)


def get_back_parsing_markup(parser: str, payload: str = "") -> InlineKeyboardMarkup:
    if payload:
        payload = ":" + payload
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=parser + ":start" + payload
        )]
    ])


count_markup = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text="20"),
        KeyboardButton(text="50")
    ],
    [
        KeyboardButton(text="70"),
        KeyboardButton(text="100")
    ],
    [cancel_btn]
], resize_keyboard=True)

no_count_markup = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text="20"),
        KeyboardButton(text="50")
    ],
    [
        KeyboardButton(text="70"),
        KeyboardButton(text="100")
    ],
    [KeyboardButton(text="no")],
    [cancel_btn]
], resize_keyboard=True)
